express.js 다운로드 받기
 npm install express --save
    * --save : package.json의 "dependencies" 에 명시해달라는 의미

mongoose
 - mongodb를 사용하기 쉽게 도와주는 tool


model : Schema를 감싸주는 역할
schema : 객체의 상태를 정의하는 것을 의미한다.


nodemon 다운로드
 - 소스코드 변경 시 수동 재시작없이 자동으로 재시작하여 소스코드 반영을 적용한다.
    npm install nodemon --save-dev
        * --save-dev : 개발 환경에서만 사용할 용도라는 것을 정의
                    이로 인해, build 할 때 제외된다.

 - 시작 명령어를 nodemon으로 한다.
    원래 node run start 이런 형식으로 했다.

    package.json 파일의 script에
    "backend": "nodemon index.js" 를 추가한 후
    npm run backend로 시작한다. 


Bcrypt로 비밀번호 암호화
 -DB에 저장되는 비밀번호가 DB 쿼리를 통해 보면 명확히 보인다.
 - 이를 방지하기 위해 비밀번호 암호화를 해줘서 데이터베이스에 저장해야 한다.

 Bcrypt로 비밀번호 암호화하는 순서
 1. 먼저 Register Route로 가기
 2. 유저 정보를 (Account, Password 등) 데이터베이스에 저장하기 전에 암호화할 타이밍
 3. bcrypt 사이트 보면서 진행
 4. salt 생성
 5. salt를 이용해서 비밀번호를 암호화한다.


로그인 기능 만들기
 1. 로그인 route 만들기
 2. 데이터베이스에서 요청된 email이 존재하는지 찾기
 3. email이 있다면 password가 일치하는지 찾기
 4. email, password가 모두 일치하면 token을 생성한다.
    - JSONWEBTOKEN 라이브러리를 사용한다.
    - npm install jsonwebtoken --save
5. 쿠키에 token을 저장한다.
    - npm install cookie-parser --save


Auth 기능 만들기
 1. Cookie에서 저장된 Token을 Server에서 가져와서 복호화한다.
 2. 복호화를 하면 User ID가 나오는데 그 User Id를 이용해서 데이터베이스 User Collection에서 유저를 찾은 후
    Cookie에서 받아온 token이 유저도 갖고 있는지 확인 한다.



로그아웃 기능 만들기
 1. 로그아웃 Route 만들기
 2. 로그아웃하려는 유저를 데이터베이스에서 찾아서
 3. 그 유저의 토큰을 지워준다.



React js
 - Javascript Library
 - Components
    - module과 비슷하게 컴포넌트로 이뤄져 있어서 reusable이 뛰어나다.
 - virtual DOM
    - Real Dom은 10개의 리스트 중 하나만 update 되고 전체 리스트를 다시 Reload 해야 된다.
        Super Exprensive한 작업
    - Virtual Dom 은 10개의 리스트 중 하나가 update 되면 변경된 아이템만 DOM 에서 바꿔준다!

    * Virtual DOM은 Real DOM과 같은 properties들을 갖고 있다면 그냥 가볍게
        Real DOM을 Copy한거라 보면 된다.
    1. JSX(우선 HTML으로 알아두기) 올 렌더링 한다.
        그러면 Virtual DOM이 Update 된다.
    2. Virtual DOM이 이전 virtual DOM에서 찍어둔 Snapshot과 비교해서 바뀐 부분을 찾는다.
        이 과정을 diffing 이라고 부른다.
    3. 바뀐 부분만 Real DOM에서 바꿔준다.


react 설치
    npx create-react-app .


폴더/파일 구조 설명
_actions, _reducer : Redux를 위한 폴더들

components/views : 이 안에 Page들을 넣는다.

components/views/Sections : 이 안에는 해당 페이지에 관려된 css 파일이나, component들을 넣는다.

app.js : Routing 관련 일을 처리한다.

Config.js : 환경 변수 같은 것들을 정하는 곳이다.

hoc, utils : Higher Order Component의 약자로 여러 군데에서 쓰일 수 있는 것들을
        이곳에 넣어둬서 어디서든 쓸 수 있게 해준다.


React Router DOM
 - React에서는 페이지 간의 이동할 때 React Router DOM 이라는 것을 사용한다.
 - 라이브러리를 설치한다.
    npm install react-router-dom --save



데이터 Flow & Axios
 - request를 보낼 때 Axios를 통해 데이터를 보내고 받는다.
 - axios 를 다운로드 받는다.
    npm install axios --save



CORS 이슈, Proxy 설정
 - nodejs는 5000 port
 - react는 3000 port를 사용하도록 서비스를 둘 다 올리면
 - 아무 설정 없이는 Request를 보낼 수 없다.
 - 이런 이유는 CORS 정책에 의해 막히기 때문이다.
    (보안적인 이유에 의해)
 - CORS (Cross-Origin Resource Sharing)
 - 여러 해결 방법이 있다.
 - 우린 Proxy 사용하는 방법으로 해결한다.

 - proxy 다운로드
    npm install http-proxy-middleware --save



** Proxy Server를 사용하는 이유는
    1. 회사에서 직원들이나 집안에서 아이들 인터넷 사용 제어
    2. 캐쉬를 이용해 더 빠른 인터넷 이용 제공
    3. 더 나은 보안 제공
    4. 이용 제한된 사이트 접근 가능



Concurrently
 - nodejs 서버와 react 서버를 각각 실행 시켜야하는데
    한번에 실행 시킬 수 있도록 도와준다.
 - concurrently 다운로드
    npm install concurrently --save


Antd CSS Framework
 - CSS Framework 종류 for React JS
    1. Material UI
    2. React Bootstrap
    3. Semantic UI
    4. Ant Design : 이것을 사용할 것 이다.
    5. Materialize

 - Ant Design 다운로드
    npm install antd --save


Redux
 - 상태 관리 라이브러리
 - state container
 - Props vs State
    - Props
        1. 부모 componenet 안에 child component가 있을 때
            두 component 간에 뭔가를 주고 받을 때는 Prop을 이용해야 한다.
        2. 소통 방식이 parent compoenne에서 child component로만 무언가를 보낼 수 있다.
        3. parent component에서 전달한 데이터가 child component로 전달했다면
            전달된 데이터는 변경될 수 없다.
        4. 그렇기에 다른 데이터가 필요하다면 parent component에서 다른 데이터를
            child component로 내려줘야한다.

    - state
        1. parent component에서 child component로 data를 보내는게 아닌
            한 개의 component 안에서 데이터를 전달하려면?
            State으로

            예를 들어, 검색 창에 글을 입력할 때 글이 변하는 것을 state을 바꿈

        2. State is mutable

        3. State 이 변하면 re-render 된다.

 - Redux 데이터 Flow(strict unidirectional data flow)
    React Components -> Dispatch(action) ->
    Action -> Reducer -> Store -> Subscibe ->
    React Component


Setting Up Redux
 - Dependency
    1. Redux
    2. react-redux
    3. redux-promis : redux middleware
        : dispatch에게 어떻게 promise가 들어왔을 때 어떻게 받는지 알려주는 역할
    4. redux-thunk  : redux middleware
        : dispatch에게 어떻게 function을 받을 수 있는지 알려주는 역할
 - 다운로드 명령어
    npm install redux react-redux redux-promise redux-thunk --save

































































































































































